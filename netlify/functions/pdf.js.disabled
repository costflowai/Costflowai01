/**
 * Netlify Function: HTML to PDF Generator
 * Converts HTML to PDF using Puppeteer (only used if PDF_MODE=netlify)
 */

const puppeteer = require('puppeteer');

exports.handler = async (event, context) => {
  const requestId = context.awsRequestId || `pdf-${Date.now()}`;
  const startTime = Date.now();
  
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': process.env.CORS_ORIGINS || 'https://costflowai.com',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'X-Request-ID': requestId
  };

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({
        error: 'Method not allowed',
        message: 'Only POST requests are supported',
        requestId
      })
    };
  }

  let browser = null;

  try {
    // Parse request body
    let payload;
    try {
      payload = JSON.parse(event.body);
    } catch (parseError) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          error: 'Invalid JSON payload',
          requestId
        })
      };
    }

    const { html, filename } = payload;
    
    if (!html) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          error: 'Missing HTML content',
          requestId
        })
      };
    }

    console.log('Starting PDF generation:', requestId, 'HTML length:', html.length);

    // Launch Puppeteer
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-first-run',
        '--no-zygote',
        '--single-process'
      ]
    });

    const page = await browser.newPage();
    
    // Set content and wait for any dynamic content
    await page.setContent(html, { 
      waitUntil: 'networkidle0',
      timeout: 10000
    });

    // Generate PDF
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20px',
        bottom: '20px',
        left: '20px',
        right: '20px'
      },
      printBackground: true,
      displayHeaderFooter: false,
      timeout: 15000
    });

    const processingTime = Date.now() - startTime;
    
    console.log('PDF generated successfully:', requestId, 'Size:', pdfBuffer.length, 'Time:', processingTime + 'ms');

    return {
      statusCode: 200,
      headers: {
        ...headers,
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename || 'estimate.pdf'}"`,
        'Content-Length': pdfBuffer.length.toString(),
        'X-Processing-Time': processingTime.toString()
      },
      body: pdfBuffer.toString('base64'),
      isBase64Encoded: true
    };

  } catch (error) {
    const processingTime = Date.now() - startTime;
    
    console.error('PDF generation error:', error.message, 'RequestID:', requestId);
    
    return {
      statusCode: 500,
      headers: {
        ...headers,
        'X-Processing-Time': processingTime.toString()
      },
      body: JSON.stringify({
        error: 'PDF generation failed',
        message: error.message,
        requestId,
        processingTime
      })
    };
    
  } finally {
    if (browser) {
      try {
        await browser.close();
      } catch (closeError) {
        console.warn('Error closing browser:', closeError.message);
      }
    }
  }
};