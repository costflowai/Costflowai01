import { jsPDF } from '../../vendor/jspdf/jspdf.esm.js';
import * as SheetJS from '../../vendor/xlsx/xlsx.mjs';

const safeFilename = (name, extension) =>
  `${name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '') || 'estimate'}.${extension}`;

const buildRowsFromEntries = (entries) =>
  entries.map(([label, value]) => [label, typeof value === 'number' ? value.toString() : value]);

export const toCSV = ({ title, entries }) => {
  const rows = buildRowsFromEntries(entries);
  const csv = rows.map((row) => row.map((value) => `"${String(value ?? '').replace(/"/g, '""')}"`).join(',')).join('\n');
  return csv;
};

export const downloadCSV = (payload) => {
  const csv = toCSV(payload);
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = safeFilename(payload.title, 'csv');
  link.click();
  setTimeout(() => URL.revokeObjectURL(url), 1000);
};

export const downloadXLSX = (payload) => {
  const rows = buildRowsFromEntries(payload.entries);
  const workbook = SheetJS.utils.book_new();
  const sheet = SheetJS.utils.aoa_to_sheet([['Field', 'Value'], ...rows]);
  SheetJS.utils.book_append_sheet(workbook, sheet, 'Estimate');
  const arrayBuffer = SheetJS.write(workbook, { type: 'array' });
  const blob = new Blob([arrayBuffer], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = safeFilename(payload.title, 'xlsx');
  link.click();
  setTimeout(() => URL.revokeObjectURL(url), 1000);
};

const formatLine = ([label, value]) => `${label}: ${value}`;

export const downloadPDF = ({ title, subtitle, entries, notes }) => {
  const doc = new jsPDF();
  let cursor = 60;
  doc.setFontSize(20);
  doc.text(title, 40, cursor);
  cursor += 16;
  doc.setFontSize(12);
  doc.text(subtitle ?? 'Concrete estimate generated by CostFlowAI', 40, cursor);
  cursor += 20;
  doc.line(40, cursor, 560, cursor);
  cursor += 20;
  entries.forEach((entry) => {
    doc.text(formatLine(entry), 40, cursor);
    cursor += 16;
    if (cursor > 700) {
      cursor = 60;
    }
  });
  cursor += 10;
  doc.text('Assumptions & Notes', 40, cursor);
  cursor += 14;
  notes?.forEach((note) => {
    doc.text(`â€¢ ${note}`, 48, cursor);
    cursor += 14;
  });
  doc.save(safeFilename(title, 'pdf'));
};

export const triggerPrint = () => {
  window.print();
};

export default {
  toCSV,
  downloadCSV,
  downloadXLSX,
  downloadPDF,
  triggerPrint
};
